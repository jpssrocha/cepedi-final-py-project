from abc import ABC, abstractmethod

class PatrimonyItem(ABC):

    __slots__ = []
    types     = []
    description: str

    @property
    @abstractmethod
    def cash_flow(self) -> float:
        """Calculates the cash_flow generated by an item"""
        pass


    @property
    @abstractmethod
    def estimated_value(self) -> float:
        """Estimates the value of an item"""
        pass

    @property
    def type(self) -> str:
        """Define if patrimony item is an asset or liability"""
        return "liability" if self.cash_flow < 0 else "asset"

    def to_dict(self) -> dict:
        return {attribute: getattr(self, attribute)for attribute in self.__slots__ }
